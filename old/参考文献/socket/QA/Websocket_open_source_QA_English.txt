【English】

This document simply guides you through the process of creating your own WebSocket site and addresses some common questions related to WebSocket.

Q: What can the WebSocket in the DG-LAB APP do? How does it work with Coyote V3?

A: WebSocket is a commonly used messaging protocol, and the APP communicates with Coyote V3 through Bluetooth messages. Firstly, communication between the APP and the Coyote V3 is conducted through Bluetooth messages, and waveforms cannot be sent via methods other than the APP (even with remote control).
Therefore, considering various DIY gameplays and needs, we have designed a protocol that allows you to set up your own WebSocket server for network connection with the APP. You can then send data in the correct format to the APP via WebSocket, and the APP will parse and send it to Coyote V3 for execution. Our demo game is a classic example (https://www.dungeon-lab.com/t-rex-runner/index.html). To complete this demo, we have set up a test WebSocket server (wss://ws.dungeon-lab.cn/). Considering your privacy and security, we do not recommend using our test server to build your own WebSocket application, as it is not very reliable. When you open the homepage of the game, it will automatically run a JS script to request its own UUID from the WebSocket server (this UUID is for the server to identify each client, and it is different in each communication). After that, the webpage will generate a QR code for the link, which you can scan with the socket scanning feature on the APP's homepage to establish a connection. (In fact, the APP also requests once from the server to get its own UUID for this chat, and the server will bind the chat relationship between the two into a 1-to-1 mode. Even though you can open many web pages and mobile APPs to connect to the WebSocket server separately, you will find that their direct communications with each other do not interfere.)


Q: How can I obtain the QR code? How can I install the demo game project on my server?

A: In fact, the QR code contains the WebSocket server address information. We currently provide a game demonstration on our official website (https://www.dungeon-lab.com/t-rex-runner/index.html). To complete this demonstration, we have set up a test WebSocket server. The QR code prefix you see in the document (https://www.dungeon-lab.com/app-download.php#DGLAB-SOCKET#) must exist, otherwise the APP will not be able to recognize the availability of the connection. The content following this prefix, for example, your ws server address is ws://testws.test.com or wss://testws.test.com, both are valid, and the WSS protocol is more secure. To find out your own ws server address, you will need to search the contents of search engines, which requires a certain level of coding ability. After determining your WebSocket server address, you can follow these steps to try to install the demonstration code on your own WebSocket server:

1. After installing node.js on the server, download our WebSocketNode.js script to run (the address is https://github.com/DG-LAB-OPENSOURCE/DG-LAB-OPENSOURCE/tree/main/socket/BackEnd(Node)).
2. Deploy the FULL HTML project we provide on the server (the address is https://github.com/DG-LAB-OPENSOURCE/DG-LAB-OPENSOURCE/tree/main/socket/FrontEnd(Html%2BCss%2BJs)).
3. You also need to modify the wsConnection.js file in the FrontEnd(Html+Css+Js) we provide, changing wsConn = new WebSocket("ws://12.34.56.78:9999/"); to your WebSocket server address (both ws and wss protocols are acceptable, we recommend using wss, which is more secure).
4. Check the file in step 3, there is a piece of code, qrcodeImg.makeCode("https://www.dungeon-lab.com/app-download.php#DGLAB-SOCKET#ws://12.34.56.78:9999/" + connectionId); the address ws://12.34.56.78:9999/ needs to be changed to your WebSocket address.
5. After saving the above modifications, and using node to start the WebSocket service, open your website page (suppose you have completed step 2 and can correctly access it from the Internet or the intranet), you can click on the connection in the upper right corner of the web page to get your own QR code. In fact, after opening the web page, the web page will automatically run the wsConnection.js script to create a connection with the WebSocket server and obtain a unique UUID for this web page in this WebSocket communication.
6. Use the mobile APP to scan the QR code displayed on the web page, and the APP will link to the WebSocket server to obtain a second UUID, which is the unique identifier for the APP in this communication. The websocketNode.js running on the server will bind the two UUIDs from step 5 and step 6 into a communication relationship, and when either party closes the WebSocket link, the server will end this WebSocket communication.
7. When the web page or APP sends a message to the WebSocket server, the WebSocket server will act as a message forwarder based on the binding relationship in step 6.

Q: How to control two Coyote V3 with one phone?

A: This requires you to modify our websocketNode.js file. You can quickly master its content, which is developed using JavaScript. The core logic is that each UUID corresponds to a device, and our design concept does not stipulate that the WebSocket server and the APP must communicate on a 1-to-1 basis. You can modify the code logic and rerun the node.js server to let each APP scan the QR code and enter a "chat room". Here we use a metaphor to explain: the code sample we provide is a 1-to-1 private chat channel established between two devices through the WebSocket server. Your requirement is to transform this structure into a public chat room, or a 1-to-N chat room. You can modify the websocketNode.js to let the WebSocket receive messages and broadcast them to any device you want. For example, you can establish a Map to store all the communication UUIDs obtained by the mobile APP after scanning, and then when receiving a message sent from the web page (yes, you can identify this message as coming from your web page, not the mobile phone, based on the UUID), forward this message to all the mobile APPs corresponding to the UUIDs stored in the Map (just traverse this Map and use the send method to send messages to their respective clients in turn).

Q: Can you remotely control the site without using the QRCODE part for hard coding?

A: Unfortunately, our APP must link to your WebSocket server by scanning the QR code. You must have a page that can display the QR code for the APP to scan to link up, because the Coyote V3 can only connect to the mobile APP via Bluetooth. At present, we have not provided a UI interface for directly entering the WebSocket address.