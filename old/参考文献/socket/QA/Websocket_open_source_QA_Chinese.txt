【中文】
这篇文档简单的给您创建属于您自己的websocket站点以及解决一些websoket相关的疑惑

Q：DG-LAB APP中的Websocket可以做什么？它如何与Coyote v3一起工作？

A：Websocket是一个很常用的消息转发协议，首先，APP与Coyote V3之间是通过蓝牙消息进行通信的，无法通过APP之外的方式发送波形（即便是通过远程控制），因此我们考虑到各种DIY玩法和需求，设计了一个协议让您可以自己搭建Websocket服务器与APP进行网络连接，然后将符合格式的数据通过Websocket向APP发送，再由APP解析发送给Coyote V3执行。我们写的示范游戏就是一个经典例子，（https://www.dungeon-lab.com/t-rex-runner/index.html），为了完成这个示范，我们搭建了一个测试用的websocket服务器（wss://ws.dungeon-lab.cn/），考虑到您的隐私和安全性，我们不推荐您使用我们的测试服务器来搭建自己的Websocket应用，因为它并不十分可靠。在您打开游戏的首页时，它会自动运行JS脚本向websocket服务器请求属于自己的uuid（这个uuid是为了让服务器识别每个客户端分别是谁，在每次通讯中这都是不一样的），这之后网页会将链接生成一个二维码，您使用APP首页的socket扫码功能就可以扫描它并建立链接。（实际上，APP也向服务器请求了一次，获取到了自己这次聊天中的uuid，服务器会将两者的聊天关系绑定成1对1模式，尽管您可以打开许多个网页和手机APP分别链接到websocket服务器，但您会发现，他们彼此直接的通讯是互不干扰的。）

Q：是否可以将两台coyote v3主机通过websocket链接起来？

A：这需要您有一定的代码编写能力，我们目前的websocket设计逻辑是1对1模式，也就是一个coyote v3主机先通过蓝牙连接手机之后，手机再和websocket服务器连接，通过websocket服务器从网络向手机APP传达指令，最后才由APP转发指令给coyote主机执行。如果您使用我们提供的模板代码，那么您会发现在网页中生成的QR code实际上包含一段uuid，而您使用手机APP扫描这个QR code之后，WS服务器也会为手机生成一个uuid并在WS服务器中存储他们为一对Key-Value关系，在您关闭此次连接之前，这个关系可以让您的APP和WS服务器保持严格的1对1通讯。（即使您开启了多个网页，并分别使用不同的手机连接上不同的coyote v3主机，再扫描QR code建立websocket连接，手机A的发送的数据也不会影响手机B）

Q：如何获取QRcode？如何在我的服务器上安装示范游戏项目？

A：实际上，QRcode是包含了websocket服务器地址信息的，我们目前在官网上提供了一个游戏示范（https://www.dungeon-lab.com/t-rex-runner/index.html），为了完成这个示范，我们搭建了一个测试用的websocket服务器。您看到文档里的QRcode前缀（https://www.dungeon-lab.com/app-download.php#DGLAB-SOCKET#）是必须存在的，否则APP无法识别出连接的可用性，而在这个前缀之后的内容，比如说您的ws服务器地址是ws://testws.test.com或者wss://testws.test.com，他们都是合法的，WSS协议更加安全。如何知道自己的ws服务器地址需要您查询一下搜索引擎中的相关内容，这需要一定的编码能力。确定好您的websocket服务器地址后，您可以遵循如下步骤尝试在自己的websocket服务器上安装好示范代码：

1、在服务器上安装node.js之后，下载我们的websocketNode.js脚本来运行（地址是https://github.com/DG-LAB-OPENSOURCE/DG-LAB-OPENSOURCE/tree/main/socket/BackEnd(Node)）。
2、在服务器上部署好我们提供的html项目（地址是https://github.com/DG-LAB-OPENSOURCE/DG-LAB-OPENSOURCE/tree/main/socket/FrontEnd(Html%2BCss%2BJs)）。
3、您还需要修改我们提供的FrontEnd(Html+Css+Js)/wsConnection.js这个文件中关于
wsConn = new WebSocket("ws://12.34.56.78:9999/");将它改成您的websocket服务器地址（ws或者wss协议都是可以的，我们推荐使用wss，它更安全）。
4、检查第3步的文件里还有一段代码，qrcodeImg.makeCode("https://www.dungeon-lab.com/app-download.php#DGLAB-SOCKET#ws://12.34.56.78:9999/" + connectionId); 这里面的地址ws://12.34.56.78:9999/需要修改成您的websocket地址。
5.保存上述修改之后，并使用node来启动websocket服务之后，打开您的网站页面（假如您已经完成了第二步并且能够从互联网或者局域网上正确访问它），您就可以点击在网页右上角的connection获取到属于您自己的QRcode了，实际上打开网页之后，网页会自动运行wsConnection.js脚本以创建一个和websocket服务器的连接，并获取一个本次websocket通讯中属于这个网页的唯一uuid。
6、使用手机APP扫描网页显示的QRcode，APP会链接到websocket服务器获取第二个uuid，这是APP在本次通信中的唯一标识，服务器中运行的websocketNode.js会将第五步和第六步中两个uuid绑定成一个通信关系，其中任何一方关闭websocket链接时，服务器都会结束这次websocket通信。
7、当网页或者APP向websocket服务器发送消息时，websocket服务器就会根据第六步的绑定关系来查询自己接收到的消息需要转发给谁，是的websocket本质上是一个消息转发器。

Q：如何通过一个手机同时控制两台coyote v3主机？

A：这需要您修改我们的websocketNode.js文件，您可以很快的掌握它的内容，它使用JavaScript开发，核心逻辑是每个uuid对应一个设备，而我们的设计理念并没有规定您必须让websocket服务器和app必须是1对1通讯的，您可以通过修改代码逻辑，并重新运行node.js服务器，让每个APP扫描QRcode之后都进入一个“聊天室”，这里我们通过一个比喻来解释：我们提供的代码样例是两个设备通过websocket服务器建立了一个1对1的私聊频道，那么您的需求就是把这个结构改造成一个公共聊天室，或者说1对N的聊天室，那么您可以修改websocketNode.js，让websocket接收到消息时，群发给任何您希望它发送的设备。比如说您可以建立一个Map来存储所有的手机APP扫描后获取到的通讯uuid，然后在收到网页发送过来的消息时（没错，您可以根据uuid识别出这条消息是来自于您的网页而不是手机），将这条消息转发给Map里存储的所有手机APP对应的uuid（只需要遍历这个Map并使用send方法依次向它们对应的client发送消息）

Q：可以在不使用二维码扫描的情况下使用Websocket吗？

A：很遗憾，我们的APP必须通过扫描QRcode才能链接上您的websocket服务器，您必须有一个可以显示QRcode的页面让APP扫描才能链接上，因为coyote v3 只能通过蓝牙链接到手机APP上，当前我们还没有提供直接输入websocket地址的UI界面。